from fastapi import FastAPI
from pydantic import BaseModel
from fastapi.middleware.cors import CORSMiddleware
import os
import google.generativeai as genai
from dotenv import load_dotenv

# ✅ Load environment variables
load_dotenv()

# ✅ Initialize FastAPI
app = FastAPI()

# ✅ Enable CORS for frontend
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ✅ Get Gemini API Key
GEMINI_KEY = os.getenv("GOOGLE_API_KEY")

# ✅ Configure Gemini if key is available
if GEMINI_KEY:
    genai.configure(api_key=GEMINI_KEY)

# ✅ Request Model
class ChatRequest(BaseModel):
    message: str

# ✅ Chat Endpoint
@app.post("/chat")
async def chat_endpoint(request: ChatRequest):
    user_message = request.message.strip()
    print(f"Received: {user_message}")

    # 🔹 If API key missing → return fallback message
    if not GEMINI_KEY:
        return {"reply": "⚠️ Gemini API key not found. Using fallback bot reply."}

    try:
        # ✅ Use the correct model name for Gemini
        model = genai.GenerativeModel("gemini-1.5-flash")  # or "gemini-1.5-pro"
        response = model.generate_content(user_message)

        # ✅ Extract bot reply safely
        bot_reply = getattr(response, "text", None) or "⚠️ No reply generated by Gemini."
    except Exception as e:
        bot_reply = f"❌ Gemini API Error: {str(e)}"

    return {"reply": bot_reply}

# ✅ Root Test Endpoint
@app.get("/")
async def root():
    return {"message": "FastAPI Chatbot with Gemini 1.5 API 🚀"}
