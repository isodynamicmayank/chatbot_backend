from fastapi import FastAPI
from pydantic import BaseModel
from fastapi.middleware.cors import CORSMiddleware
import os
import google.generativeai as genai

# Load API Key
GEMINI_KEY = os.getenv("GEMINI_API_KEY")
if GEMINI_KEY:
    genai.configure(api_key=GEMINI_KEY)

app = FastAPI()

# ‚úÖ Enable CORS for all origins (required for Firebase ‚Üí Render calls)
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ‚úÖ Request Model
class ChatRequest(BaseModel):
    message: str

# ‚úÖ Root endpoint (for testing)
@app.get("/")
async def root():
    return {"message": "FastAPI Chatbot with Gemini 1.5 API üöÄ"}

# ‚úÖ Chat Endpoint
@app.post("/chat")
async def chat_endpoint(request: ChatRequest):
    user_message = request.message.strip()
    print(f"Received: {user_message}")

    # ‚úÖ If no Gemini Key, return fallback
    if not GEMINI_KEY:
        return {"reply": "‚ö†Ô∏è Gemini API key not found. Using fallback reply."}

    try:
        # ‚úÖ Call Gemini Model
        model = genai.GenerativeModel("gemini-1.5-flash")
        response = model.generate_content(user_message)

        # ‚úÖ Extract reply safely
        bot_reply = getattr(response, "text", None) or "‚ö†Ô∏è No reply generated by Gemini."
    except Exception as e:
        bot_reply = f"‚ùå Gemini API Error: {str(e)}"

    return {"reply": bot_reply}
